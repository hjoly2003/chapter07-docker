package microservices.book.multiplication.challenge;

import java.util.List;


import javax.transaction.Transactional;

import org.springframework.stereotype.Service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import microservices.book.multiplication.user.User;
import microservices.book.multiplication.user.UserRepository;

/**
 * Used to connect the challenge logic whith the Multiplication publisher.
 */
@Slf4j
@RequiredArgsConstructor
@Service
public class ChallengeServiceImpl implements ChallengeService {

    private final UserRepository userRepository;
    private final ChallengeAttemptRepository attemptRepository;
    
    // [N]:rabbitmq 
    private final ChallengeEventPub challengeEventPub; 

    /**
     * The {@code @Transactional} annotation ensures that if we have a problem, the {@code attemptDTO} won't be persisted in BD. If there is an exception in a method annotated with {@code @Transactional}, the transaction will be rolled back.<p/>
     * When we send messages with {@code AmqpTemplate} or its {@code RabbitTemplate} implementation within the scope of a method annotated with {@code @Transactional} and when we enable transactionality in the channel (RabbitMQ), these messages donâ€™t reach the broker if an exception happens even after the method call to send them. 
     * @see https://tpd.io/rmq-tx. 
     */
    @Transactional
    @Override
    public ChallengeAttempt verifyAttempt(ChallengeAttemptDTO attemptDTO) {
        // Check if the user already exists for that alias, otherwise create it
        User user = userRepository.findByAlias(attemptDTO.getUserAlias())
                .orElseGet(() -> {
                    log.info("Creating new user with alias {}",
                            attemptDTO.getUserAlias());
                    return userRepository.save(
                            new User(attemptDTO.getUserAlias())
                    );
                });

        // Check if the attempt is correct
        boolean isCorrect = attemptDTO.getGuess() ==
                attemptDTO.getFactorA() * attemptDTO.getFactorB();

        // Builds the domain object. Null id since it'll be generated by the DB.
        ChallengeAttempt checkedAttempt = new ChallengeAttempt(null,
                user,
                attemptDTO.getFactorA(),
                attemptDTO.getFactorB(),
                attemptDTO.getGuess(),
                isCorrect
        );

        // Stores the attempt
        ChallengeAttempt storedAttempt = attemptRepository.save(checkedAttempt);

        // [N]:rabbitmq - Publishes an event to notify potentially interested subscribers
        challengeEventPub.challengeSolved(storedAttempt);

        return storedAttempt;
    }

    @Override
    public List<ChallengeAttempt> getStatsForUser(final String userAlias) {
        return attemptRepository.findTop10ByUserAliasOrderByIdDesc(userAlias);
    }
}
